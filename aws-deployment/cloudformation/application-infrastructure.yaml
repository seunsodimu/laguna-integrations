AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Infrastructure for 3DCart NetSuite Integration'

Parameters:
  ProjectName:
    Type: String
    Default: 'laguna-3dcart-netsuite'
    Description: 'Project name for resource naming'
  
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['production', 'staging', 'development']
    Description: 'Environment name'

  InstanceType:
    Type: String
    Default: 't3.small'
    AllowedValues: ['t3.micro', 't3.small', 't3.medium']
    Description: 'EC2 instance type'

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'EC2 Key Pair for SSH access'

  DomainName:
    Type: String
    Description: 'Domain name for the application (e.g., integration.lagunatools.com)'

  CertificateArn:
    Type: String
    Description: 'ARN of SSL certificate from AWS Certificate Manager'

Resources:
  # S3 Bucket for Application Files and Backups
  ApplicationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-app-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-app-bucket'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for EC2 Instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${ApplicationBucket}/*'
                  - !GetAtt ApplicationBucket.Arn
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Environment}/*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-launch-template'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 AMI (update for your region)
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-WebSG-ID'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            
            # Install PHP 8.1 and required extensions
            yum install -y amazon-linux-extras
            amazon-linux-extras enable php8.1
            yum install -y php php-cli php-fpm php-json php-common php-mysql php-zip php-gd php-mbstring php-curl php-xml php-pear php-bcmath php-json php-opcache
            
            # Install Apache
            yum install -y httpd
            systemctl enable httpd
            systemctl start httpd
            
            # Install Composer
            curl -sS https://getcomposer.org/installer | php
            mv composer.phar /usr/local/bin/composer
            chmod +x /usr/local/bin/composer
            
            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            
            # Install CloudWatch Agent
            yum install -y amazon-cloudwatch-agent
            
            # Create application directory
            mkdir -p /var/www/html
            chown -R apache:apache /var/www/html
            
            # Configure PHP-FPM
            sed -i 's/user = apache/user = apache/' /etc/php-fpm.d/www.conf
            sed -i 's/group = apache/group = apache/' /etc/php-fpm.d/www.conf
            systemctl enable php-fpm
            systemctl start php-fpm
            
            # Configure Apache
            cat > /etc/httpd/conf.d/app.conf << 'EOF'
            <VirtualHost *:80>
                DocumentRoot /var/www/html/public
                DirectoryIndex index.php
                
                <Directory /var/www/html/public>
                    AllowOverride All
                    Require all granted
                </Directory>
                
                # PHP-FPM Configuration
                <FilesMatch \.php$>
                    SetHandler "proxy:fcgi://127.0.0.1:9000"
                </FilesMatch>
            </VirtualHost>
            EOF
            
            # Create deployment script
            cat > /home/ec2-user/deploy.sh << 'EOF'
            #!/bin/bash
            cd /var/www/html
            
            # Download application from S3 (you'll upload this after creating the bucket)
            aws s3 sync s3://${ApplicationBucket}/app/ . --delete
            
            # Install dependencies
            composer install --no-dev --optimize-autoloader
            
            # Set permissions
            chown -R apache:apache /var/www/html
            chmod -R 755 /var/www/html
            chmod -R 777 /var/www/html/logs
            chmod -R 777 /var/www/html/uploads
            
            # Restart services
            systemctl restart httpd
            systemctl restart php-fpm
            EOF
            
            chmod +x /home/ec2-user/deploy.sh
            
            # Signal CloudFormation
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-${Environment}-web-server'
              - Key: Environment
                Value: !Ref Environment

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${Environment}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-PublicSubnet1-ID'
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-PublicSubnet2-ID'
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-asg'
          PropagateAtLaunch: false
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-ALBSG-ID'
      Subnets:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-PublicSubnet1-ID'
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-PublicSubnet2-ID'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb'
        - Key: Environment
          Value: !Ref Environment

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tg'
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-VPC-ID'
      HealthCheckPath: /status.php
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-tg'

  # HTTPS Listener
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # HTTP Listener (redirect to HTTPS)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # CloudWatch Log Group
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${ProjectName}-${Environment}'
      RetentionInDays: 30

Outputs:
  LoadBalancerDNS:
    Description: 'Application Load Balancer DNS Name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ALB-DNS'

  ApplicationBucketName:
    Description: 'S3 Bucket Name for Application Files'
    Value: !Ref ApplicationBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-Bucket-Name'

  AutoScalingGroupName:
    Description: 'Auto Scaling Group Name'
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ASG-Name'